from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loader import adminRouter, db
from utils.misc_func.bot_models import FSM
from keyboards.inline.adminkeyinline import view_dialogs_key, back_fun_key, save_dialog_key
from states.admin_state import *
import re
import random
import json
from utils.misc_func.generator_dialogs import ai_generate_dialog

@adminRouter.message(F.text == 'üìú –î–∏–∞–ª–æ–≥–∏')
async def dialogs_handler(msg: Message, state: FSM):
    await state.clear()
    dialogs = await db.get_all_dialogs()
    dialogs.reverse()
    keyboard = view_dialogs_key(dialogs[:5], start_index=0, page_size=5, total=len(dialogs))
    text = (
        f"<b>üìú –î–∏–∞–ª–æ–≥–∏</b>\n\n"
        f"–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogs)}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞:"
    )
    await msg.answer(text, reply_markup=keyboard)

@adminRouter.callback_query(F.data == 'dialogs')
async def dialogs_callback_handler(call: CallbackQuery, state: FSM):
    await state.clear()
    dialogs = await db.get_all_dialogs()
    dialogs.reverse()
    keyboard = view_dialogs_key(dialogs[:5], start_index=0, page_size=5, total=len(dialogs))
    text = (
        f"<b>üìú –î–∏–∞–ª–æ–≥–∏</b>\n\n"
        f"–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogs)}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞:"
    )
    await call.message.edit_text(text, reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith('list_dlg_next_'))
async def list_dialogs_next(call: CallbackQuery, state: FSM):
    start_index = int(call.data.split('_')[-1])
    dialogs = await db.get_all_dialogs()
    dialogs.reverse()
    if start_index >= len(dialogs):
        await call.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=True)
        return
    keyboard = view_dialogs_key(dialogs[start_index:start_index+5], start_index=start_index, page_size=5, total=len(dialogs))
    await call.message.edit_reply_markup(reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith('list_dlg_back_'))
async def list_dialogs_back(call: CallbackQuery, state: FSM):
    start_index = int(call.data.split('_')[-1])
    prev_index = max(0, start_index - 5)
    dialogs = await db.get_all_dialogs()
    dialogs.reverse()
    keyboard = view_dialogs_key(dialogs[prev_index:prev_index+5], start_index=prev_index, page_size=5, total=len(dialogs))
    await call.message.edit_reply_markup(reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith('getdlg_'))
async def get_dialog(call: CallbackQuery, state: FSM):
    dialog_id = int(call.data.split('_')[-1])
    dialog = await db.get_dialog_by_id(dialog_id)
    if not dialog:
        await call.answer("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    messages = dialog['messages']
    text = f"<b>–î–∏–∞–ª–æ–≥: {dialog['name']}</b>\n\n"
    for message in messages:
        text += f"[{message['role']}] {message['text']}\n"
    text += f"\n<em>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {dialog['num_accounts']}</em>"
    keyboard = back_fun_key('dialogs')
    await call.message.edit_text(text, reply_markup=keyboard)

@adminRouter.callback_query(F.data == 'add_dialog')
async def add_dialog_start(call: CallbackQuery, state: FSM):
    await state.set_state(AdminDialogStates.waiting_for_dialog_name)
    await call.message.edit_text("üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞:", reply_markup=back_fun_key('dialogs'))

@adminRouter.message(AdminDialogStates.waiting_for_dialog_name)
async def process_dialog_name(msg: Message, state: FSM):
    name = msg.text.strip()
    if not name:
        await msg.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(name=name)
    keyboard = back_fun_key('dialogs')
    await msg.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "[Role] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "[User1] –ü—Ä–∏–≤–µ—Ç\n"
        "[User2] –ö–∞–∫ –¥–µ–ª–∞?",
        reply_markup=keyboard
    )
    await state.set_state(AdminDialogStates.waiting_for_dialog_messages)

@adminRouter.message(AdminDialogStates.waiting_for_dialog_messages)
async def process_dialog_messages(msg: Message, state: FSM):
    lines = msg.text.strip().splitlines()
    pattern = re.compile(r"^\[(?P<role>[^\]]+)\]\s*(?P<text>.+)$")
    messages = []
    keyboard = back_fun_key('dialogs')
    for idx, line in enumerate(lines, start=1):
        match = pattern.match(line)
        if not match:
            await msg.answer(
                f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ {idx}: ¬´{line}¬ª\n"
                "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ [Role] –¢–µ–∫—Å—Ç."
            )
            return
        messages.append({
            "role": match.group("role"),
            "text": match.group("text")
        })
    await state.update_data(messages=messages)
    await msg.answer("üî¢ –°–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞? –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0:", reply_markup=keyboard)
    await state.set_state(AdminDialogStates.waiting_for_num_accounts)

@adminRouter.message(AdminDialogStates.waiting_for_num_accounts)
async def process_num_accounts(msg: Message, state: FSM):
    text = msg.text.strip()
    if not text.isdigit() or int(text) < 1:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è:")
        return
    num_accounts = int(text)
    data = await state.get_data()
    name = data['name']
    messages = data['messages']
    new_id = await db.add_dialog(name=name, messages=messages, num_accounts=num_accounts)
    await msg.answer(f"‚úÖ –î–∏–∞–ª–æ–≥ ¬´{name}¬ª (ID {new_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()
    dialogs = await db.get_all_dialogs()
    keyboard = view_dialogs_key(dialogs[:5], start_index=0, page_size=5, total=len(dialogs))
    await msg.answer("üìú –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤:", reply_markup=keyboard)

@adminRouter.callback_query(F.data == 'generate_dialog')
async def generate_dialog_start(call: CallbackQuery, state: FSM):
    await call.answer()
    await state.set_state(AdminAIGenerateStates.waiting_for_num_roles)
    await call.message.edit_text(
        "<b>üîÄ AI-–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0):"
    )

@adminRouter.message(AdminAIGenerateStates.waiting_for_num_roles)
async def generate_dialog_process(msg: Message, state: FSM):
    text = msg.text.strip()
    if not text.isdigit() or int(text) < 1:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è:")
        return
    num_roles = int(text)
    await msg.answer("<i>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ AI, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>")
    try:
        result = await ai_generate_dialog(num_roles)
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await state.clear()
        return
    out = [f"<b>üîÄ {result['name']}</b>\n"]
    for message in result['messages']:
        out.append(f"[{message['role']}] {message['text']}")
    text_out = "\n".join(out)
    await msg.answer(text_out)
    keyboard = save_dialog_key(result)
    await state.update_data(ai_dialog=result)
    await msg.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith("save_ai_dialog_"))
async def save_ai_dialog(call: CallbackQuery, state: FSM):
    name = call.data.replace("save_ai_dialog_", "")
    data = await state.get_data()
    ai_dialog = data.get("ai_dialog", {})
    await state.clear()
    if not ai_dialog or ai_dialog.get("name") != name:
        await call.answer("‚ùå –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", show_alert=True)
        return
    try:
        dialog_id = await db.add_dialog(
            name=ai_dialog["name"],
            messages=ai_dialog["messages"],
            num_accounts=ai_dialog["num_accounts"]
        )
        await call.answer(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ–¥ ID={dialog_id}", show_alert=True)
    except Exception as e:
        await call.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ abilities: {e}", show_alert=True)
    dialogs = await db.get_all_dialogs()
    dialogs.reverse()
    keyboard = view_dialogs_key(dialogs[:5], start_index=0, page_size=5, total=len(dialogs))
    await call.message.edit_text("üìú –°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤:", reply_markup=keyboard)