import re
from pathlib import Path
import json
from aiogram import F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.media_group import MediaGroupBuilder
from utils.misc_func.bot_models import FSM
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
from loader import adminRouter, db, account_manager, bot
from keyboards.inline.adminkeyinline import *
from states.admin_state import AdminAccountStates, AdminUpdateTextMedia
from io import BytesIO
from utils.misc_func.otherfunc import filter_by_add_id, createMediaGroupByPath

@adminRouter.message(F.text == 'üë§ –ê–∫–∫–∞—É–Ω—Ç—ã')
async def accounts_handler(msg: Message, state: FSM):
    await state.clear()
    accounts = await db.get_all_telegram_accounts()
    keyboard = view_accounts_key(accounts[:5], start_index=0, page_size=5, total=len(accounts))
    text = (
        "<b>üë§ –ê–∫–∫–∞—É–Ω—Ç—ã</b>\n\n"
        f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:"
    )
    await msg.answer(text, reply_markup=keyboard)

@adminRouter.callback_query(F.data == 'accounts_all')
async def accounts_all_handler(call: CallbackQuery, state: FSM):
    await state.clear()
    accounts = await db.get_all_telegram_accounts()
    keyboard = view_accounts_key(accounts[:5], start_index=0, page_size=5, total=len(accounts))
    text = (
        "<b>üë§ –ê–∫–∫–∞—É–Ω—Ç—ã</b>\n\n"
        f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:"
    )
    await call.message.edit_text(text, reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith('list_acc_next_'))
async def list_accounts_next(call: CallbackQuery, state: FSM):
    start_index = int(call.data.split('_')[-1])
    accounts = await db.get_all_telegram_accounts()
    if start_index >= len(accounts):
        await call.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=True)
        return
    keyboard = view_accounts_key(accounts[start_index:start_index+5], start_index=start_index, page_size=5, total=len(accounts))
    await call.message.edit_reply_markup(reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith('list_acc_back_'))
async def list_accounts_back(call: CallbackQuery, state: FSM):
    start_index = int(call.data.split('_')[-1])
    prev_index = max(0, start_index - 5)
    accounts = await db.get_all_telegram_accounts()
    keyboard = view_accounts_key(accounts[prev_index:prev_index+5], start_index=prev_index, page_size=5, total=len(accounts))
    await call.message.edit_reply_markup(reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith('getacc_'))
async def get_account(call: CallbackQuery, state: FSM):
    account_id = int(call.data.split('_')[-1])
    account = await db.get_telegram_account_by_id(account_id)
    if not account:
        await call.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    proxy = (
        f"{account['proxy']['type']}://{account['proxy']['username']}:{account['proxy']['password']}@"
        f"{account['proxy']['host']}:{account['proxy']['port']}" if account['proxy'] else '–Ω–µ—Ç'
    )
    text = (
        f"<b>–ê–∫–∫–∞—É–Ω—Ç: {account['name'] or account['session_name']}</b>\n\n"
        f"–ò–º—è —Å–µ—Å—Å–∏–∏: <code>{account['session_name']}</code>\n"
        f"ID –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{account['account_id']}</code>\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{account['phone_number'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
        f"–ü—Ä–æ–∫—Å–∏: <code>{proxy}</code>\n"
        f"–°—Ç–∞—Ç—É—Å: <code>{'‚úÖ –∞–∫—Ç–∏–≤–µ–Ω' if account['is_active'] else '‚ùå –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}</code>"
    )
    keyboard = account_detail_key(account)
    await call.message.edit_text(text, reply_markup=keyboard)

@adminRouter.callback_query(F.data == 'add_account')
async def add_account_start(call: CallbackQuery, state: FSM):
    await state.set_state(AdminAccountStates.waiting_for_account_name)
    keyboard = back_fun_key('accounts_all')
    await call.message.edit_text("üÜï –í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫—É/–∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=keyboard)

@adminRouter.message(AdminAccountStates.waiting_for_account_name)
async def process_account_name(msg: Message, state: FSM):
    name = msg.text.strip()
    if not name:
        await msg.answer("‚ùå –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(account_label=name)
    keyboard = back_fun_key('accounts_all')
    await state.set_state(AdminAccountStates.waiting_for_session_str)
    await msg.answer(
        "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à <code>.session</code>-—Ñ–∞–π–ª "
        "(–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º <code>.session</code>).",
        reply_markup=keyboard
    )

@adminRouter.message(AdminAccountStates.waiting_for_session_str)
async def process_session_file(msg: Message, state: FSM):
    document = msg.document
    if not document or not document.file_name.endswith('.session'):
        await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º <code>.session</code>:")
        return
    file_info = await msg.bot.get_file(document.file_id)
    raw = await msg.bot.download_file(file_info.file_path)
    tmp_dir = Path("sessions_tmp")
    tmp_dir.mkdir(exist_ok=True)
    tmp_path = tmp_dir / document.file_name
    tmp_path.write_bytes(raw.read())
    keyboard = back_fun_key('accounts_all')
    await state.update_data(session_path=str(tmp_path))
    await msg.answer(
        "üåê –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏:\n"
        "<code>protocol://[user:pass@]host:port</code>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>socks5://login:pass@127.0.0.1:9050</code>\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code>, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω—É–∂–µ–Ω.",
        reply_markup=keyboard
    )
    await state.set_state(AdminAccountStates.waiting_for_proxy)

@adminRouter.message(AdminAccountStates.waiting_for_proxy)
async def process_proxy_and_add(msg: Message, state: FSM):
    text = msg.text.strip()
    proxy = None
    if text.lower() != '-':
        pattern = re.compile(
            r'^(?P<proto>\w+)://'
            r'(?:(?P<username>[^:]+):(?P<password>[^@]+)@)?'
            r'(?P<host>[^:]+):(?P<port>\d+)$'
        )
        match = pattern.match(text)
        if not match:
            await msg.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏.\n"
                "–§–æ—Ä–º–∞—Ç: <code>protocol://login:pass@host:port</code> –∏–ª–∏ <code>protocol://host:port</code>.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>socks5://127.0.0.1:9050</code>"
            )
            return
        proxy = {
            "type": match.group("proto").lower(),
            "host": match.group("host"),
            "port": int(match.group("port")),
            "username": match.group("username"),
            "password": match.group("password"),
        }
    data = await state.get_data()
    label = data['account_label']
    session_tmp = data['session_path']
    new_name = await account_manager.add_account(
        session_file=session_tmp,
        proxy=json.dumps(proxy, ensure_ascii=False) if proxy else None
    )
    try:
        Path(session_tmp).unlink()
    except Exception:
        pass
    if not new_name:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Å—Å–∏—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        await state.clear()
        return
    await msg.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç ¬´{label}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ–¥ –∏–º–µ–Ω–µ–º <code>{new_name}</code>.")
    await state.clear()
    accounts = await db.get_all_telegram_accounts()
    keyboard = view_accounts_key(accounts[:5], start_index=0, page_size=5, total=len(accounts))
    await msg.answer("üë§ –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:", reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith("acc_edit_proxy_"))
async def edit_account_proxy(call: CallbackQuery, state: FSM):
    account_id = int(call.data.split("_")[-1])
    await state.update_data(edit_acc_id=account_id)
    await state.set_state(AdminAccountStates.waiting_for_proxy_edit)
    keyboard = back_fun_key(f"getacc_{account_id}")
    await call.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>protocol://[user:pass@]host:port</code>\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code>, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏.",
        reply_markup=keyboard
    )

@adminRouter.message(AdminAccountStates.waiting_for_proxy_edit)
async def process_proxy_edit(msg: Message, state: FSM):
    data = await state.get_data()
    account_id = data['edit_acc_id']
    text = msg.text.strip()
    if text == "-":
        await db.update_account_proxy(account_id, None)
    else:
        pattern = re.compile(
            r'^(?P<proto>\w+)://'
            r'(?:(?P<username>[^:]+):(?P<password>[^@]+)@)?'
            r'(?P<host>[^:]+):(?P<port>\d+)$'
        )
        match = pattern.match(text)
        if not match:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ '-' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            return
        proxy = {
            "type": match.group("proto"),
            "username": match.group("username"),
            "password": match.group("password"),
            "host": match.group("host"),
            "port": int(match.group("port"))
        }
        await db.update_account_proxy(account_id, json.dumps(proxy, ensure_ascii=False))
    await msg.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=back_fun_key(f'getacc_{account_id}'))
    await state.clear()

@adminRouter.callback_query(F.data.startswith("acc_remove_proxy_"))
async def remove_account_proxy(call: CallbackQuery, state: FSM):
    account_id = int(call.data.split("_")[-1])
    await db.update_account_proxy(account_id, None)
    await call.message.edit_text("‚úÖ –ü—Ä–æ–∫—Å–∏ —É–¥–∞–ª—ë–Ω", reply_markup=back_fun_key(f'getacc_{account_id}'))

@adminRouter.callback_query(F.data.startswith("acc_toggle_active_"))
async def toggle_account_active(call: CallbackQuery, state: FSM):
    account_id = int(call.data.split("_")[-1])
    account = await db.get_telegram_account_by_id(account_id)
    new_status = not account['is_active']
    await db.update_account_active(account_id, new_status)
    proxy = (
        f"{account['proxy']['type']}://{account['proxy']['username']}:{account['proxy']['password']}@"
        f"{account['proxy']['host']}:{account['proxy']['port']}" if account['proxy'] else '–Ω–µ—Ç'
    )
    account = await db.get_telegram_account_by_id(account_id)
    text = (
        f"<b>–ê–∫–∫–∞—É–Ω—Ç: {account['name'] or account['session_name']}</b>\n\n"
        f"–ò–º—è —Å–µ—Å—Å–∏–∏: <code>{account['session_name']}</code>\n"
        f"ID –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{account['account_id']}</code>\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{account['phone_number'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
        f"–ü—Ä–æ–∫—Å–∏: <code>{proxy}</code>\n"
        f"–°—Ç–∞—Ç—É—Å: <code>{'‚úÖ –∞–∫—Ç–∏–≤–µ–Ω' if account['is_active'] else '‚ùå –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}</code>"
    )
    keyboard = account_detail_key(account)
    await call.message.edit_text(text, reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith("acc_delete_"))
async def delete_account_request(call: CallbackQuery, state: FSM):
    account_id = int(call.data.split("_")[-1])
    keyboard = acc_delete_confirm_key(account_id)
    await call.message.edit_text("üö´ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith("acc_confirm_delete_"))
async def confirm_account_delete(call: CallbackQuery, state: FSM):
    account_id = int(call.data.split("_")[-1])
    account = await db.get_account_by_uniq_id(account_id)
    await db.delete_account(account['session_name'])
    await account_manager.stop_account(account['session_name'])
    await call.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω", show_alert=True)
    accounts = await db.get_all_telegram_accounts()
    keyboard = view_accounts_key(accounts[:5], start_index=0, page_size=5, total=len(accounts))
    await call.message.edit_text(
        f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=keyboard
    )

@adminRouter.callback_query(F.data.startswith("upacc_name_"))
async def update_account_name_start(call: CallbackQuery, state: FSM):
    account_id = int(call.data.split("_")[-1])
    await state.update_data(edit_acc_id=account_id)
    await state.set_state(AdminAccountStates.waiting_for_name_update)
    keyboard = back_fun_key(f"getacc_{account_id}")
    await call.message.edit_text(
        "‚ôªÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è (First Last):",
        reply_markup=keyboard
    )
    await call.answer()

@adminRouter.message(AdminAccountStates.waiting_for_name_update)
async def process_account_name_update(msg: Message, state: FSM):
    data = await state.get_data()
    account_id = data["edit_acc_id"]
    new_name = msg.text.strip()
    if not new_name:
        await msg.answer("‚ùå –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        return
    record = await db.get_telegram_account_by_id(account_id)
    await account_manager.update_account_name(record["session_name"], new_name)
    keyboard = back_fun_key(f"getacc_{account_id}")
    await msg.answer("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=keyboard)
    await state.clear()

@adminRouter.callback_query(F.data.startswith("upacc_about_"))
async def update_account_about_start(call: CallbackQuery, state: FSM):
    account_id = int(call.data.split("_")[-1])
    await state.update_data(edit_acc_id=account_id)
    await state.set_state(AdminAccountStates.waiting_for_about_update)
    keyboard = back_fun_key(f"getacc_{account_id}")
    await call.message.edit_text(
        "‚ôªÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç ¬´–û —Å–µ–±–µ¬ª:",
        reply_markup=keyboard
    )
    await call.answer()

@adminRouter.message(AdminAccountStates.waiting_for_about_update)
async def process_account_about_update(msg: Message, state: FSM):
    data = await state.get_data()
    account_id = data["edit_acc_id"]
    new_about = msg.text.strip()
    record = await db.get_telegram_account_by_id(account_id)
    await account_manager.update_account_about(record["session_name"], new_about)
    keyboard = back_fun_key(f"getacc_{account_id}")
    await msg.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=keyboard)
    await state.clear()

@adminRouter.callback_query(F.data.startswith("upacc_photo_"))
async def update_account_photo_start(call: CallbackQuery, state: FSM):
    account_id = int(call.data.split("_")[-1])
    await state.update_data(edit_acc_id=account_id)
    await state.set_state(AdminAccountStates.waiting_for_photo_update)
    keyboard = back_fun_key(f"getacc_{account_id}")
    await call.message.edit_text(
        "‚ôªÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–∫–∞–∫ —Ñ–æ—Ç–æ, –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç):",
        reply_markup=keyboard
    )
    await call.answer()

@adminRouter.message(AdminAccountStates.waiting_for_photo_update, F.photo)
async def process_account_photo_update(msg: Message, state: FSM):
    data = await state.get_data()
    account_id = data["edit_acc_id"]
    photo = msg.photo[-1]
    file = await msg.bot.get_file(photo.file_id)
    buf_io = await msg.bot.download_file(file.file_path)
    photo_bytes = buf_io.read()
    record = await db.get_telegram_account_by_id(account_id)
    session_name = record["session_name"]
    success = await account_manager.update_account_photo(session_name, photo_bytes)
    keyboard = back_fun_key(f"getacc_{account_id}")
    if success:
        await msg.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=keyboard)
    else:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ.", reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith('acc_media_'))
async def account_media_handler(call: CallbackQuery, state: FSM):
    account_id = int(call.data.split('_')[-1])
    account_media = await db.get_all_media_account(account_id=int(account_id))
    clear_dict = filter_by_add_id(account_media)
    text = (
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:"
    )
    await call.message.edit_text(text, reply_markup=view_media_key(account_id, clear_dict, start=0, total=len(clear_dict)))

@adminRouter.callback_query(F.data.startswith('vmdeia_back_'))
async def media_back_handler(call: CallbackQuery, state: FSM):
    start = int(call.data.split("_")[-2])
    account_id = int(call.data.split("_")[-1])
    account_media = await db.get_all_media_account(account_id=int(account_id))
    clear_dict = filter_by_add_id(account_media)
    await call.message.edit_reply_markup(reply_markup=view_media_key(account_id, clear_dict, start=start, total=len(clear_dict)))

@adminRouter.callback_query(F.data.startswith('vmdeia_next_'))
async def media_next_handler(call: CallbackQuery, state: FSM):
    start = int(call.data.split("_")[-2])
    account_id = int(call.data.split("_")[-1])
    account_media = await db.get_all_media_account(account_id=int(account_id))
    clear_dict = filter_by_add_id(account_media)
    await call.message.edit_reply_markup(reply_markup=view_media_key(account_id, clear_dict, start=start, total=len(clear_dict)))

@adminRouter.callback_query(F.data.startswith('viewmedia_'))
async def view_media_handler(call: CallbackQuery, state: FSM):
    add_id = int(call.data.split('_')[1])
    account_id = int(call.data.split('_')[2])
    media_list = await db.get_all_media_by_add_id(add_id)
    one_ex = len(media_list) == 1 and media_list[0]['media_type'] in ['video_note', 'voice_note']
    if not one_ex:
        media = await createMediaGroupByPath(media_list)
        media = media.build()
        try:
            await bot.send_media_group(chat_id=call.from_user.id, media=media)
        except Exception as e:
            logger.exception(e)
            await call.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É', show_alert=True)
            return
    else:
        media_dict = media_list[0]
        media = FSInputFile(media_dict['media_path'])
        try:
            if media_dict['media_type'] == 'video_note':
                await bot.send_video_note(chat_id=call.from_user.id, video_note=media)
            elif media_dict['media_type'] == 'voice_note':
                await bot.send_voice(chat_id=call.from_user.id, voice=media)
        except Exception as e:
            logger.exception(e)
            await call.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å {"–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ" if media_dict["media_type"] == "video_note" else "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}', show_alert=True)
            return
    text = "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ üëá"
    await call.message.answer(text, reply_markup=func_media_key(account_id, add_id, one_ex, media_list[0]['is_active']))

@adminRouter.callback_query(F.data.startswith('mediaedittext_'))
async def media_edit_text_handler(call: CallbackQuery, state: FSM):
    add_id = int(call.data.split('_')[1])
    account_id = int(call.data.split('_')[2])
    await state.set_state(AdminUpdateTextMedia.add_id)
    await state.update_data(add_id=add_id)
    await state.set_state(AdminUpdateTextMedia.acc_id)
    await state.update_data(acc_id=account_id)
    await state.set_state(AdminUpdateTextMedia.text)
    keyboard = back_fun_key(f'viewmedia_{add_id}_{account_id}')
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:', reply_markup=keyboard)

@adminRouter.message(AdminUpdateTextMedia.text)
async def update_text_media_handler(msg: Message, state: FSM):
    data = await state.get_data()
    add_id = data.get('add_id')
    account_id = data.get('acc_id')
    new_text = msg.text
    await db.update_text_media(add_id, new_text)
    await state.clear()
    keyboard = back_fun_key(f'viewmedia_{add_id}_{account_id}')
    await msg.answer('‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω', reply_markup=keyboard)

@adminRouter.callback_query(F.data.startswith('media_trash_'))
async def media_trash_handler(call: CallbackQuery, state: FSM):
    add_id = int(call.data.split('_')[2])
    account_id = int(call.data.split('_')[3])
    text = "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã?"
    await call.message.edit_text(text, reply_markup=two_factor_delete_media(account_id, add_id))

@adminRouter.callback_query(F.data.startswith('sucdelmedia_'))
async def confirm_media_delete_handler(call: CallbackQuery, state: FSM):
    add_id = int(call.data.split('_')[1])
    account_id = int(call.data.split('_')[2])
    await db.delete_media(add_id)
    text = "‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã"
    keyboard = back_fun_key(f'acc_media_{account_id}')
    await call.message.edit_text(text, reply_markup=keyboard)